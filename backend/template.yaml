Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
  Function:
    Runtime: python3.9
    MemorySize: 128
    Timeout: 30

Resources:
  Events:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  Tickets:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  Locations:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  SQLLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/layer_sql
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9
  EventHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: EventHandler
      CodeUri: src/Events
      Handler: app.handler
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref Events
          TABLE_ARN: !GetAtt Events.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Events
      Events:
        APIBackendGETevent:
          Type: Api
          Properties:
            Path: /event
            Method: GET
            RestApiId: !Ref APIBackend
        APIBackendGETeventid:
          Type: Api
          Properties:
            Path: /event/{id}
            Method: GET
            RestApiId: !Ref APIBackend
        APIBackendPOSTevent:
          Type: Api
          Properties:
            Path: /event
            Method: POST
            RestApiId: !Ref APIBackend
  EventHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${EventHandler}

  TicketHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TicketHandler
      CodeUri: src/Tickets
      Handler: app.handler
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref Tickets
          TABLE_ARN: !GetAtt Tickets.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Tickets
      Events:
        APIBackendPUTticket:
          Type: Api
          Properties:
            Path: /ticket/{id}
            Method: PUT
            RestApiId: !Ref APIBackend
        APIBackendPOSTticket:
          Type: Api
          Properties:
            Path: /ticket
            Method: POST
            RestApiId: !Ref APIBackend
        APIBackendGETtickets:
          Type: Api
          Properties:
            Path: /ticket
            Method: GET
            RestApiId: !Ref APIBackend
        APIBackendGETticketid:
          Type: Api
          Properties:
            Path: /ticket/{id}
            Method: GET
            RestApiId: !Ref APIBackend
  TicketHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${TicketHandler}
  
  LocationHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: LocationHandler
      CodeUri: src/Locations
      Handler: app.handler
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref Locations
          TABLE_ARN: !GetAtt Locations.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Locations
      Events:
        APIBackendGETlocations:
          Type: Api
          Properties:
            Path: /locations
            Method: GET
            RestApiId: !Ref APIBackend
        APIBackendGETlocationid:
          Type: Api
          Properties:
            Path: /location/{id}
            Method: GET
            RestApiId: !Ref APIBackend
        APIBackendPOSTlocation:
          Type: Api
          Properties:
            Path: /location
            Method: POST
            RestApiId: !Ref APIBackend
  LocationHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${LocationHandler}

  RDSTicketHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: RDSTicketHandler
      CodeUri: src/RDSBacked/tickets
      Handler: app.handler
      Tracing: Active
      Environment:
        Variables:
          DB_USER: admin
          DB_PASSWORD: Password123!
          DB_HOST: mydbinstance.cluster-cwy9ycgwyhan.us-east-1.rds.amazonaws.com
          DB_PORT: 3306
          DB_NAME: ticketing
      # Policies:
      #   - AuroraDataAPIPolicy:
      #       FromAuroraCluster: mydbcluster
      #       ResourceArn: arn:aws:rds:us-east-1:123456789012:cluster:mydbcluster
      #       SqlStatements:
      #         - SELECT * FROM events
      Layers:
        - !Ref SQLLayer
      Events:
        APIBackendGETrdsticket:
          Type: Api
          Properties:
            Path: /rdsticket
            Method: GET
            RestApiId: !Ref APIBackend
        APIBackendPOSTrdsticket:
          Type: Api
          Properties:
            Path: /rdsticket
            Method: POST
            RestApiId: !Ref APIBackend
        APIBackendGETrdsticketid:
          Type: Api
          Properties:
            Path: /rdsticket/{id}
            Method: GET
            RestApiId: !Ref APIBackend
        APIBackendPUTrdsticket:
          Type: Api
          Properties:
            Path: /rdsticket/{id}
            Method: POST
            RestApiId: !Ref APIBackend
  RDSTicketHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${RDSTicketHandler}

  APIBackend:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: APIBackend
      StageName: Prod
      DefinitionBody:
        openapi: "3.0"
        info: {}
        paths:
          /event:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventHandler.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventHandler.Arn}/invocations
              responses: {}
          /event/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventHandler.Arn}/invocations
              responses: {}
          /ticket:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TicketHandler.Arn}/invocations
              responses: {}          
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TicketHandler.Arn}/invocations
              responses: {}
          /ticket/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TicketHandler.Arn}/invocations
              responses: {}
          /locations:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LocationHandler.Arn}/invocations
              responses: {}
          /location/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LocationHandler.Arn}/invocations
              responses: {}
          /location:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LocationHandler.Arn}/invocations
              responses: {}
          /rdsticket:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RDSTicketHandler.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RDSTicketHandler.Arn}/invocations
              responses: {}
          /rdsticket/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RDSTicketHandler.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RDSTicketHandler.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  
  APIBackendCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${APIBackend}.execute-api.${AWS::Region}.amazonaws.com"
            Id: APIBackend
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: APIBackend
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 200
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

        Enabled: true
        DefaultRootObject: index.html
        PriceClass: PriceClass_All
        # WebACLId: !Ref WebACL
        Restrictions:
          GeoRestriction:
            RestrictionType: none
      Tags:
        - Key: Name
          Value: MyCloudFrontDistribution

  

Outputs:
  APIBackend:
    Description: API Gateway endpoint URL for Prod stage for API Backend
    Value: !Sub https://${APIBackend}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  EventHandler:
    Description: Lambda function info for EventHandler
    Value: !GetAtt EventHandler.Arn
  TicketHandler:
    Description: Lambda function info for TicketHandler
    Value: !GetAtt TicketHandler.Arn
  LocationHandler:
    Description: Lambda function info for LocationHandler
    Value: !GetAtt LocationHandler.Arn
  